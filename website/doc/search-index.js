var searchIndex = new Map(JSON.parse('[\
["copper",{"doc":"","t":"CCCCCCCCPFGPPNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNPPPPPPPPPPGNNNNNNNHFNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNPPFPGNNNNNNNNNNNNNNNNNNNNNNNNNNNPPGNNHNNNHNNNNH","n":["lsm_tree","column","entry","log","memtable","sstable","tree","wal","Bool","Column","DataType","Int","Text","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","from_char","get_char","get_data_type","get_name","into","into","new","try_from","try_from","try_into","try_into","type_id","type_id","Entry","borrow","borrow_mut","fmt","from","get_key","get_size","get_value","into","is_deleted","new","try_from","try_into","type_id","Clear","Compact","Creation","Decode","Deletion","Flush","Get","GetRange","Insertion","Load","Operation","borrow","borrow_mut","from","into","try_from","try_into","type_id","write_log","Memtable","borrow","borrow_mut","clear","default","fmt","from","get","get_all_entries","get_entries","get_range","get_size","insert","into","is_full","new","try_from","try_into","type_id","SSTable","borrow","borrow_mut","clear","compact","fmt","from","from_memtable","get","get_all_entries","get_range","get_size","into","load_from_disk","merge","save_to_disk","try_from","try_into","type_id","Bool","Int","LsmTree","Text","Value","borrow","borrow","borrow_mut","borrow_mut","clear","compact","decode","delete","flush","fmt","fmt","from","from","get","get_range","insert","into","into","load","new","size","try_from","try_from","try_into","try_into","type_id","type_id","Io","MalformedEntry","WalError","borrow","borrow_mut","clear_wal","fmt","from","from","get_memtable_from_wal","into","try_from","try_into","type_id","write_to_wal"],"q":[[0,"copper"],[1,"copper::lsm_tree"],[8,"copper::lsm_tree::column"],[34,"copper::lsm_tree::entry"],[48,"copper::lsm_tree::log"],[67,"copper::lsm_tree::memtable"],[86,"copper::lsm_tree::sstable"],[105,"copper::lsm_tree::tree"],[137,"copper::lsm_tree::wal"],[152,"core::fmt"],[153,"core::fmt"],[154,"core::any"],[155,"std::path"],[156,"core::option"],[157,"alloc::vec"],[158,"alloc::collections::btree::map"],[159,"std::io::error"],[160,"alloc::string"],[161,"std::collections::hash::map"],[162,"core::ops::function"]],"d":["<code>lsm_tree</code> module","","","","","","","","","<code>Column</code> struct represents a column in a database table. It …","<code>DataType</code> enum represents the type of data that can be …","","","","","","","Formats the <code>Column</code> for printing.","Formats the <code>DataType</code> for printing.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a <code>DataType</code> from a character. ‘i’ for <code>Int</code>, ‘t…","Returns a character representing the <code>DataType</code>. ‘i’ for …","Returns the data type of the <code>Column</code>.","Returns the name of the <code>Column</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new <code>Column</code> with the given <code>name</code> and <code>data_type</code>.","","","","","","","<code>Entry</code> struct represents an entry in a database. It has a …","","","Formats the <code>Entry</code> for printing.","Returns the argument unchanged.","Returns the key of the <code>Entry</code>.","Returns the size of the <code>Entry</code>, which is the sum of the …","Returns the value of the <code>Entry</code>.","Calls <code>U::from(self)</code>.","Returns whether the <code>Entry</code> is deleted.","Creates a new <code>Entry</code> with the given <code>key</code>, <code>value</code>, and <code>deleted</code> …","","","","","","","","","","","","","","<code>Entry</code> struct represents an entry in a database. It has a …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Writes a log of an operation to a file.","<code>Memtable</code> struct represents an in-memory table in a …","","","Clears the <code>Memtable</code>, removing all entries, setting the …","Creates a new <code>Memtable</code> with default values.","Formats the <code>Memtable</code> for printing.","Returns the argument unchanged.","Returns the entry with the given key if it exists and the …","Returns all entries in the <code>Memtable</code>.","Returns a reference to the <code>BTreeMap</code> of entries in the …","Returns a range of entries in the <code>Memtable</code> from the start …","Returns the size of the <code>Memtable</code>.","Inserts a new entry into the <code>Memtable</code>.","Calls <code>U::from(self)</code>.","Returns whether the <code>Memtable</code> is full, i.e., its size is …","Creates a new <code>Memtable</code> with an empty <code>BTreeMap</code> of entries, …","","","","","","","Clears the <code>SSTable</code>, removing all entries and clearing the …","Compacts a level of <code>SSTable</code>s into a single <code>SSTable</code>.","Formats the <code>SSTable</code> for printing.","Returns the argument unchanged.","Creates a new <code>SSTable</code> from a <code>Memtable</code>.","Returns the value of the entry with the given key if it …","Saves the <code>SSTable</code> to a file on disk.","Returns a range of entries in the <code>SSTable</code> from the start …","Returns the size of the <code>SSTable</code>, which is the sum of the …","Calls <code>U::from(self)</code>.","Loads an <code>SSTable</code> from a file on disk.","Merges multiple <code>SSTable</code>s into a single <code>SSTable</code>.","Saves the <code>SSTable</code> to a file on disk.","","","","","","<code>LsmTree</code> struct represents a Log-Structured Merge Tree in a …","","<code>Value</code> enum represents a value in a database entry. It can …","","","","","Clear the LSM Tree. Clears the memtable and each SSTable …","Compact the levels of the LSM Tree. For each level, if …","Decode a byte slice into a HashMap. Splits the byte slice …","Delete a key-value pair from the LSM Tree. Inserts a …","Flush the memtable to an SSTable and clear the memtable. …","Formats the <code>LsmTree</code> for printing. Includes the path, …","Formats the <code>Value</code> for printing. Matches on the <code>Value</code> …","Returns the argument unchanged.","Returns the argument unchanged.","Retrieve a value associated with a given key from the LSM …","Get a range of entries from the LSM Tree. Gets all entries …","Insert a key-value pair into the LSM Tree. Checks if the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Load an LSM Tree from a given path. Reads the …","Creates a new <code>LsmTree</code> with the given path and columns.","Get the total size of the LSM Tree. Adds the size of the …","","","","","","","","","","","","Clears the Write-Ahead Log (WAL).","","Returns the argument unchanged.","","Gets a memtable from the Write-Ahead Log (WAL).","Calls <code>U::from(self)</code>.","","","","Writes an entry to the Write-Ahead Log (WAL)."],"i":[0,0,0,0,0,0,0,0,4,0,0,4,4,1,4,1,4,1,4,1,4,4,4,1,1,1,4,1,1,4,1,4,1,4,0,9,9,9,9,9,9,9,9,9,9,9,9,9,15,15,15,15,15,15,15,15,15,15,0,15,15,15,15,15,15,15,0,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,25,25,0,25,0,23,25,23,25,23,23,23,23,23,23,25,23,25,23,23,23,23,25,23,23,23,23,25,23,25,23,25,29,29,0,29,29,0,29,29,29,0,29,29,29,29,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,2],3],[[4,2],3],[-1,-1,[]],[-1,-1,[]],[5,4],[4,5],[1,4],[1,6],[-1,-2,[],[]],[-1,-2,[],[]],[[6,4],1],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],[-1,8,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[9,2],3],[-1,-1,[]],[9,[[11,[10]]]],[9,12],[9,[[11,[10]]]],[-1,-2,[],[]],[9,13],[[[11,[10]],[11,[10]],13],9],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],[[14,15],16],0,[-1,-2,[],[]],[-1,-2,[],[]],[17,16],[[],17],[[17,2],3],[-1,-1,[]],[[17,[11,[10]]],[[18,[9]]]],[17,[[19,[9]]]],[17,[[20,[[19,[10]],9]]]],[[17,[11,[10]],[11,[10]]],[[19,[9]]]],[17,12],[[17,[11,[10]],[11,[10]],13],13],[-1,-2,[],[]],[17,13],[[],17],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[21,16],[[[19,[21]]],21],[[21,2],3],[-1,-1,[]],[17,21],[[21,[11,[10]]],[[18,[[19,[10]]]]]],[21,[[19,[9]]]],[[21,[11,[10]],[11,[10]]],[[19,[9]]]],[21,12],[-1,-2,[],[]],[6,[[7,[21,22]]]],[[[11,[21]]],21],[[21,6],[[7,[16,22]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[23,[[7,[16,22]]]],[23,[[7,[16,22]]]],[[23,[11,[10]]],[[26,[24,25]]]],[[23,[11,[10]]],[[7,[13,22]]]],[23,[[7,[16,22]]]],[[23,2],3],[[25,2],3],[-1,-1,[]],[-1,-1,[]],[[23,[11,[10]]],[[7,[[18,[[19,[10]]]],22]]]],[[23,-1],[[7,[[19,[[19,[10]]]],22]]],[[28,[9],[[27,[13]]]]]],[[23,[11,[10]],[11,[[19,[10]]]]],[[7,[16,22]]]],[-1,-2,[],[]],[-1,-2,[],[]],[24,[[7,[23,22]]]],[[24,[19,[1]]],23],[23,12],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],[-1,8,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[14,[[7,[16,29]]]],[[29,2],3],[-1,-1,[]],[22,29],[[14,[11,[1]]],[[7,[17,29]]]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],[[14,9],[[7,[16,29]]]]],"c":[],"p":[[5,"Column",8],[5,"Formatter",152],[8,"Result",152],[6,"DataType",8],[1,"char"],[1,"str"],[6,"Result",153],[5,"TypeId",154],[5,"Entry",34],[1,"u8"],[1,"slice"],[1,"usize"],[1,"bool"],[5,"Path",155],[6,"Operation",48],[1,"tuple"],[5,"Memtable",67],[6,"Option",156],[5,"Vec",157],[5,"BTreeMap",158],[5,"SSTable",86],[5,"Error",159],[5,"LsmTree",105],[5,"String",160],[6,"Value",105],[5,"HashMap",161],[17,"Output"],[10,"Fn",162],[6,"WalError",137]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
